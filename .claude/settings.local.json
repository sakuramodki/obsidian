{
  "permissions": {
    "allow": [
      "WebFetch(domain:note.com)",
      "Bash(ls:*)",
      "Bash(find:*)",
      "Bash(rg:*)",
      "Bash(# Wikilinkターゲットのリストを作成\nrg '\\[\\[([^\\]]+)\\]\\]' -o --replace '$1' -g '*.md' . | sed 's/.*://' | sort | uniq > /tmp/all_wikilinks.txt\n\necho \"=== 抽出されたWikilinkの総数 ===\"\nwc -l /tmp/all_wikilinks.txt\n\necho -e \"\\n=== 最初の20個のWikilinkターゲット ===\"\nhead -20 /tmp/all_wikilinks.txt)",
      "Bash(# 存在チェック用のスクリプト\necho \"=== Wikilinkターゲットの存在チェック ===\"\necho \"形式: [ターゲット] -> [結果]\"\necho\n\n# 主要なWikilinkターゲットをチェック\nkey_targets=(\"心理的安全性\" \"不確実性\" \"環境不確実性\" \"通信不確実性\" \"EMの4つのP\" \"プロダクトマネジメント（Product Management）\" \"プロジェクトマネジメント（Project Management）\" \"探索と活用のジレンマ\" \"フェイルファーストの原理\" \"ソフトウェアテスト\" \"CI_CD\")\n\nfor target in \"${key_targets[@]}\"; do\n  echo -n \"[$target] -> \"\n  \n  # ファイルが存在するかチェック\n  if find . -name \"${target}.md\" -type f 2>/dev/null | head -1 >/dev/null; then\n    found_file=$(find . -name \"${target}.md\" -type f 2>/dev/null | head -1)\n    echo \"✓ 存在: $found_file\"\n  else\n    # 部分一致でファイル名を検索\n    partial_match=$(find . -name \"*.md\" -type f | grep -i \"$target\" | head -1)\n    if [ -n \"$partial_match\" ]; then\n      echo \"△ 部分一致: $partial_match\"\n    else\n      echo \"✗ 存在しない\"\n    fi\n  fi\ndone)",
      "Bash(# 存在しないWikilinkターゲットをリストアップ\necho \"=== 存在しないWikilinkターゲット ===\"\necho\n\nmissing_links=()\nexisting_links=()\n\nwhile IFS= read -r target; do\n  # 空行をスキップ\n  if [ -z \"$target\" ]; then\n    continue\n  fi\n  \n  # パイプやエイリアス記法を処理\n  clean_target=$(echo \"$target\" | sed 's/|.*$//')\n  \n  # ファイルが存在するかチェック\n  if find . -name \"${clean_target}.md\" -type f 2>/dev/null | head -1 >/dev/null; then\n    existing_links+=(\"$target\")\n  else\n    # 部分一致でもチェック\n    if find . -name \"*.md\" -type f -path \"*${clean_target}*\" 2>/dev/null | head -1 >/dev/null; then\n      existing_links+=(\"$target (部分一致)\")\n    else\n      missing_links+=(\"$target\")\n    fi\n  fi\ndone < /tmp/all_wikilinks.txt\n\necho \"存在しないリンク (${#missing_links[@]}個):\"\nfor link in \"${missing_links[@]}\"; do\n    echo \"  - $link\"\ndone\n\necho -e \"\\n存在するリンク (${#existing_links[@]}個) - 最初の10個:\"\nfor i in \"${!existing_links[@]}\"; do\n    if [ $i -lt 10 ]; then\n        echo \"  - ${existing_links[$i]}\"\n    fi\ndone)",
      "Bash(# より効率的な存在チェック\necho \"=== 問題のあるWikilinkの調査 ===\"\n\n# 高頻度で参照されているWikilinkターゲットをチェック\nimportant_targets=(\"心理的安全性\" \"仮説法（Abduction）\" \"多腕バンディット問題\" \"TOC\" \"蒸発する雲\" \"以前のまとめ/モデル/心理的安全性\" \"アーキテクチャ\" \"DevOps\" \"SRE\" \"ユーザーリサーチ\" \"MVP\")\n\necho \"重要なWikilinkターゲットの存在チェック:\"\nfor target in \"${important_targets[@]}\"; do\n    echo -n \"[$target] -> \"\n    if find . -name \"${target}.md\" -type f 2>/dev/null | head -1; then\n        echo \"(ファイル名で発見)\"\n    else\n        # ファイル名の一部として存在するかチェック\n        matches=$(find . -name \"*.md\" -type f | xargs grep -l \"\\[\\[$target\\]\\]\" 2>/dev/null | head -1)\n        if [ -n \"$matches\" ]; then\n            echo \"参照あり（ファイル不存在）: $matches\"\n        else\n            echo \"✗ 全く参照されていない可能性\"\n        fi\n    fi\ndone)",
      "Bash(# 実際のファイル構造と重要なWikilinkをチェック\necho \"=== 実際のファイル存在チェック ===\"\n\n# 主要な概念ファイルが存在するか確認\nconcepts_dir=\"./02-Knowledge/概念/エンジニアリングマネージメント\"\n\necho \"既存の概念ファイル:\"\nfind \"$concepts_dir\" -name \"*.md\" -type f | sort\n\necho -e \"\\n=== 特定のWikilinkターゲットのチェック ===\"\n\n# 心理的安全性\necho -n \"心理的安全性: \"\nif [ -f \"$concepts_dir/心理的安全性.md\" ]; then\n    echo \"✓ 存在\"\nelse\n    echo \"✗ 不存在\"\nfi\n\n# その他重要なターゲット\nfor target in \"アーキテクチャ\" \"DevOps\" \"SRE\" \"MVP\" \"ユーザーリサーチ\"; do\n    echo -n \"$target: \"\n    if find . -name \"${target}.md\" -type f 2>/dev/null | head -1 >/dev/null; then\n        echo \"✓ 存在\"\n    else\n        echo \"✗ 不存在\"\n    fi\ndone)",
      "Bash(# 各カテゴリーごとに存在しないWikilinkターゲットを調査\necho \"=== 存在しないWikilinkターゲットの詳細調査 ===\"\n\n# よく参照されるが存在しない可能性のあるターゲット\nmissing_candidates=(\"心理的安全性\" \"仮説法（Abduction）\" \"多腕バンディット問題\" \"TOC\" \"アーキテクチャ\" \"DevOps\" \"SRE\" \"MVP\" \"ユーザーリサーチ\" \"蒸発する雲\" \"メタモルフィックテスティング\" \"カナリアリリース\" \"シフトレフト\" \"トイル\")\n\necho \"詳細チェック結果:\"\nfor target in \"${missing_candidates[@]}\"; do\n    echo -n \"[$target] \"\n    \n    # 概念ファイルとして存在するかチェック\n    concept_file=\"./02-Knowledge/概念/エンジニアリングマネージメント/${target}.md\"\n    if [ -f \"$concept_file\" ]; then\n        echo \"✓ 概念ファイル存在\"\n        continue\n    fi\n    \n    # サブディレクトリ内に存在するかチェック\n    found_files=$(find ./02-Knowledge -name \"${target}.md\" -type f 2>/dev/null)\n    if [ -n \"$found_files\" ]; then\n        echo \"✓ 存在: $found_files\"\n        continue\n    fi\n    \n    # リポジトリ全体で検索\n    all_found=$(find . -name \"${target}.md\" -type f 2>/dev/null | head -1)\n    if [ -n \"$all_found\" ]; then\n        echo \"△ 他の場所に存在: $all_found\"\n    else\n        echo \"✗ 不存在\"\n    fi\ndone)",
      "Bash(# 画像ファイルの参照状況を確認\necho \"=== 画像ファイルの参照状況 ===\"\n\n# Pasted imageファイルをチェック\nimage_links=$(rg '\\[\\[Pasted image [^\\]]+\\]\\]' -o -g '*.md' . | sort | uniq)\necho \"参照されている画像ファイル:\"\necho \"$image_links\"\n\necho -e \"\\n実際の画像ファイルの存在チェック:\"\necho \"$image_links\" | while read -r img_link; do\n    # [[ ]]を除去してファイル名を抽出\n    img_name=$(echo \"$img_link\" | sed 's/.*\\[\\[\\(.*\\)\\]\\].*/\\1/')\n    \n    echo -n \"[$img_name] -> \"\n    if find . -name \"$img_name\" -type f 2>/dev/null | head -1; then\n        echo \"(存在)\"\n    else\n        echo \"✗ 不存在\"\n    fi\ndone)",
      "Bash(# エイリアス記法やパイプ記法の問題を調査\necho \"=== エイリアス記法・パイプ記法の調査 ===\"\n\n# パイプを含むWikilinkを抽出\npipe_links=$(rg '\\[\\[[^\\]]+\\|[^\\]]+\\]\\]' -o -g '*.md' . | sort | uniq)\necho \"パイプ記法を使用しているWikilinkターゲット:\"\necho \"$pipe_links\" | while read -r link; do\n    # [[ ]]を除去\n    clean_link=$(echo \"$link\" | sed 's/.*\\[\\[\\(.*\\)\\]\\].*/\\1/')\n    target=$(echo \"$clean_link\" | cut -d'|' -f1)\n    alias=$(echo \"$clean_link\" | cut -d'|' -f2)\n    \n    echo \"  ターゲット: [$target] -> エイリアス: [$alias]\"\n    \n    # ターゲットファイルが存在するかチェック\n    if find . -name \"${target}.md\" -type f 2>/dev/null | head -1 >/dev/null; then\n        echo \"    ✓ ターゲットファイル存在\"\n    else\n        echo \"    ✗ ターゲットファイル不存在\"\n    fi\ndone\n\necho -e \"\\n=== 特殊なパスを含むWikilinkの調査 ===\"\n# スラッシュを含むWikilinkを抽出\npath_links=$(rg '\\[\\[[^\\]]*\\/[^\\]]*\\]\\]' -o -g '*.md' . | sort | uniq)\necho \"パスを含むWikilinkターゲット:\"\necho \"$path_links\" | while read -r link; do\n    clean_link=$(echo \"$link\" | sed 's/.*\\[\\[\\(.*\\)\\]\\].*/\\1/')\n    echo \"  [$clean_link]\"\n    \n    # 実際のパスとして存在するかチェック\n    if [ -f \"./${clean_link}.md\" ]; then\n        echo \"    ✓ パスとして存在\"\n    else\n        echo \"    ✗ パスとして不存在\"\n    fi\ndone)",
      "Bash(# 重要なパイプ記法のWikilinkを特定\necho \"=== パイプ記法を使用するWikilinkの簡易調査 ===\"\n\nrg '\\[\\[[^\\]]+\\|[^\\]]+\\]\\]' -o -g '*.md' . | sed 's/.*\\[\\[\\([^|]*\\)|\\([^\\]]*\\)\\]\\].*/ターゲット: \\1 -> エイリアス: \\2/' | sort | uniq | head -10\n\necho -e \"\\n=== 特殊なケースの調査 ===\"\n\n# Oracle Problem|オラクル問題 のケース\necho \"Oracle Problem|オラクル問題の参照状況:\"\nrg 'Oracle Problem\\|オラクル問題' -g '*.md' . | head -3\n\necho -e \"\\nCI_CD|CI/CDの参照状況:\"\nrg 'CI_CD\\|CI/CD' -g '*.md' . | head -3)",
      "Bash(# 最終的な問題の総括\necho \"=== Wikilink問題の総括 ===\"\n\necho \"1. 存在しない概念ファイル（重要度：高）\"\nmissing_important=(\"心理的安全性\" \"仮説法（Abduction）\" \"多腕バンディット問題\" \"TOC\" \"アーキテクチャ\" \"DevOps\" \"SRE\" \"MVP\" \"ユーザーリサーチ\" \"蒸発する雲\" \"メタモルフィックテスティング\" \"カナリアリリース\" \"シフトレフト\" \"トイル\")\n\nfor concept in \"${missing_important[@]}\"; do\n    # 参照回数をカウント\n    count=$(rg \"\\[\\[$concept\\]\\]\" -g '*.md' . | wc -l)\n    if [ \"$count\" -gt 0 ]; then\n        echo \"  - $concept (参照回数: $count)\"\n    fi\ndone\n\necho -e \"\\n2. パイプ記法の確認が必要なWikilinkターゲット\"\necho \"  - Oracle Problem|オラクル問題\"\necho \"  - CI_CD|CI/CD\"\necho \"  - プロジェクトマネジメント（Project Management）|プロジェクトマネージメント\"\n\necho -e \"\\n3. 存在確認済み（問題なし）\"\necho \"  - 全ての画像ファイル（Pasted image）\"\necho \"  - 既存の概念ファイル（不確実性、環境不確実性、通信不確実性など）\"\n\necho -e \"\\n4. テンプレートファイルや例示用のWikilinkターゲット\"\necho \"  - 関連する概念A, 関連する手法B\"\necho \"  - 手法A, 手法B\"\necho \"  - ty25148248 (Clippingsフォルダ内の著者識別子)\")",
      "WebFetch(domain:engineering.mercari.com)",
      "Bash(mkdir:*)",
      "WebFetch(domain:blog.cybozu.io)",
      "Bash(mv:*)",
      "Bash(rmdir:*)",
      "Bash(git add:*)"
    ],
    "deny": []
  }
}